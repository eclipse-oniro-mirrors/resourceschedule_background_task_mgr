/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable transient_task_app_info..OHOS.BackgroundTaskMgr.TransientTaskAppInfo;
sequenceable continuous_task_callback_info..OHOS.BackgroundTaskMgr.ContinuousTaskCallbackInfo;
sequenceable resource_callback_info..OHOS.BackgroundTaskMgr.ResourceCallbackInfo;
interface OHOS.BackgroundTaskMgr.IBackgroundTaskSubscriber {
    [oneway] void OnConnected();
    [oneway] void OnDisconnected();
    [oneway] void OnTransientTaskStart([in] TransientTaskAppInfo info);
    [oneway] void OnTransientTaskEnd([in] TransientTaskAppInfo info);
    [oneway] void OnAppTransientTaskStart([in] TransientTaskAppInfo info);
    [oneway] void OnAppTransientTaskEnd([in] TransientTaskAppInfo info);
    [oneway] void OnContinuousTaskStart([in] ContinuousTaskCallbackInfo continuousTaskCallbackInfo);
    [oneway] void OnContinuousTaskUpdate([in] ContinuousTaskCallbackInfo continuousTaskCallbackInfo);
    [oneway] void OnContinuousTaskStop([in] ContinuousTaskCallbackInfo continuousTaskCallbackInfo);
    [oneway] void OnContinuousTaskSuspend([in] ContinuousTaskCallbackInfo continuousTaskCallbackInfo);
    [oneway] void OnContinuousTaskActive([in] ContinuousTaskCallbackInfo continuousTaskCallbackInfo);
    [oneway] void OnAppContinuousTaskStop([in] int uid);
    void OnAppEfficiencyResourcesApply([in] ResourceCallbackInfo resourceInfo);
    void OnAppEfficiencyResourcesReset([in] ResourceCallbackInfo resourceInfo);
    void OnProcEfficiencyResourcesApply([in] ResourceCallbackInfo resourceInfo);
    void OnProcEfficiencyResourcesReset([in] ResourceCallbackInfo resourceInfo);
    [oneway] void OnTransientTaskErr([in] TransientTaskAppInfo info);
    void GetFlag([out] int flag);
}